@startuml

@startuml
skinparam classAttributeIconSize 0

package GUI{
    abstract class AbstractRouter{
        + load(String pathFXML) : Parent
        + changeView(String pathFXML, ActionEvent event)
        + adminRestricted(String pathFXML, ActionEvent event)
        + studentRestricted(String pathFXML, ActionEvent event)
    }

    class HomeStudentController{
            - bienvenueL : Label
            + myServices(ActionEvent event)
            + myHistorical(ActionEvent event)
            + searchServices(ActionEvent event)
            + logout(ActionEvent event)
            + initialize(URL location, RessourceBundle resources)
    }

    class myServicesController{
        - services : Service[]
        + viewService()
        + back(ActionEvent event)
    }

    class myHistoricalController{
            - purchasedServices : CommandOfService[]
            + addFeedback(ActionEvent event)
            + back(ActionEvent event)
     }

    class viewServiceController{
        - purchasedServices : CommandOfService[]
        + buyService(ActionEvent event)
        + acceptTransaction(ActionEvent event)
        + declineTransaction(ActionEvent event)
        + back(ActionEvent event)
    }



    class searchServicesController{
        - services : Service[]

        + seeAllServices(ActionEvent event)
        + seeProposedServices(ActionEvent event)
        + viewService(ActionEvent event)
        + searchService(ActionEvent event)
        + back(ActionEvent event)
        + initialize(URL location, RessourceBundle resources)
        + back(ActionEvent event)
    }


    class UserRouter{
        + VIEW_SERVICE_FXML_PATH : String = "views/service/view_service.fxml"
        + MY_SERVICES_FXML_PATH : String = "views/service/propose_ask_service.fxml"
        + MY_HISTORICAL_FXML_PATH: String = "views/service/myHistorical_service.fxml"
        + ALL_SERVICES_FXML_PATH : String = "views/service/all_services.fxml"
        + getInstance() : UserRouter
    }

    AbstractRouter <|-right- UserRouter


    AbstractRouter <-- HomeStudentController
    AbstractRouter <-- searchServicesController
    AbstractRouter <-- viewServiceController
    AbstractRouter <-- myServicesController
    AbstractRouter <-- myHistoricalController

    searchServicesController <.. AbstractRouter : creates
    HomeStudentController <.. AbstractRouter : creates
    myServicesController <.. AbstractRouter : creates
    viewServiceController <.. AbstractRouter : creates
    myHistoricalController <.. AbstractRouter : creates


}


package BusinessLogic{
    class FacadeCommandOfService{

        + acceptTransaction(CommandOfService c)
        + declineTransaction(CommandOfService c)
        + buyService(Service s)
        + addFeedback(CommandOfService c)
        + {static} getInstance() : FacadeService
        ' User is provided by session '
    }

    abstract class Factory{
        + CreateCommandOfServiceDAO() : CommandOfServiceDAO
    }
    class MySQLFactory{
        - db : Connection
        + {static} getInstance() : MySQLFactory
        + CreateCommandOfServiceDAO() : CommandOfServiceDAO
        - openConnection()
        - closeConnection()
    }

    Factory <.. FacadeCommandOfService : creates
    Factory <|-left- MySQLFactory

    FacadeCommandOfService <-down- viewServiceController
    FacadeCommandOfService <-down- myHistoricalController

}

package DAO{

    abstract class CommandOfServiceDAO{

        + acceptTransaction(CommandOfService c)
        + declineTransaction(CommandOfService c)
        + buyService(Service s)
        + addFeedback(CommandOfService c)

    }

    class MySQLCommandOfServiceDAO{
        - DB : Connection
        + {static} getInstance() : MySQLPartnerDAO
        + acceptTransaction(CommandOfService c)
        + declineTransaction(CommandOfService c)
        + buyService(Service s)
        + addFeedback(CommandOfService c)

    }

    MySQLCommandOfServiceDAO --|> CommandOfServiceDAO
    MySQLCommandOfServiceDAO <.right. MySQLFactory : creates

    CommandOfServiceDAO <-right- FacadeCommandOfService


}



@enduml