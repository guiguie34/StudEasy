@startuml
skinparam classAttributeIconSize 0

package GUI{
    abstract class AbstractRouter{
        + {static} load(String pathFXML) : Parent
        + changeView(String pathFXML, ActionEvent event)
        + adminRestricted(String pathFXML, ActionEvent event)
        + studentRestricted(String pathFXML, ActionEvent event)
        + partnerRestricted(String pathFXML, ActionEvent event)
    }

    class JobRouter{
        + {static} ADD_UPDATE_JOB_FXML_PATH : String = "views/job/addUpdateJob.fxml"
        + {static} JOB_OFFERS_FXML_PATH : String = "views/job/jobOffers.fxml"
        + {static} SEE_JOB_OFFER_FXML_PATH : String = "views/job/seeJobOffer.fxml"
        + {static} getInstance() : JobRouter
    }

    class HomePartnerController{
        + addJobOffer(ActionEvent event)
        + seeMyJobOffers(ActionEvent event)
    }

    class HomeStudentController{
        + searchForJob(ActionEvent)
    }

    class HomeAdminController{
        + manageJobOffers(ActionEvent event)
    }

    class AddUpdateJobOfferController{
        - jobOffer : Job
        - labelPrintJob : Label
        - jobTitleTF : TextField
        - locationTF : TextField
        - roleTypeTF : TextField
        - dateStartJobDP : DatePicker
        - lengthJobTF : TextField
        - descriptionJobTA : TextArea
        - contactInfoTA : TextArea
        - addB : Button
        - updateB : Button
        + addJobOffer(ActionEvent event)
        + updateJobOffer(ActionEvent event)
        + cancel(ActionEvent event)
        + initialize(URL location, RessourceBundle resources)
    }

    class JobOffersController{
        - jobOffers : Job[]
        - jobOffersL : Label
        - searchJobTF : TextField
        - textsJob : Text[]
        - logosStateJob : ImageView[]
        + seeJobOffer(ActionEvent event)
        + searchJob(ActionEvent event)
        + cancel(ActionEvent event)
        + initialize(URL location, RessourceBundle resources)
    }

    class SeeJobOfferController{
        - jobOffer : Job
        - titleJob : Label
        - textJob : Text
        - updateB : Button
        - deleteB : Button
        - validateB : Button
        + searchJob(ActionEvent event)
        + deleteJob(ActionEvent event)
        + updateJob(ActionEvent event)
        + validateJob(ActionEvent event)
        + cancel(ActionEvent event)
        + initialize(URL location, RessourceBundle resources)
    }

        AbstractRouter <|-right- JobRouter

        AbstractRouter <-- HomePartnerController
        AbstractRouter <-- HomeStudentController
        AbstractRouter <-- HomeAdminController
        AbstractRouter <-- AddUpdateJobOfferController
        AbstractRouter <-- JobOffersController
        AbstractRouter <-- SeeJobOfferController

        HomePartnerController <.. AbstractRouter : creates
        HomeStudentController <.. AbstractRouter : creates
        HomeAdminController <.. AbstractRouter : creates
        AddUpdateJobOfferController <.. AbstractRouter : creates
        JobOffersController <.. AbstractRouter : creates
        SeeJobOfferController <.. AbstractRouter : creates
}

package BusinessLogic{

    class FacadeJob{
        + {static} getInstance() : FacadeJob
        + addJobOffer(String jobTitle, String location, String roleType,
         Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + deleteJob(Job jobToDelete)
        + updateJob(Job jobToUpdateString, jobTitle, String location, String roleType,
          Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + validateJob(Job jobToValidate)
        + searchJob(String jobTitle) : Job
        + seeJobOffers() : Job
    }

    abstract class Factory{
        + {static} getInstance() : Factory
        + CreateJobDAO() : JobDAO
    }

    class MySQLFactory{
        - db : Connection
        + CreateJobDAO() : JobDAO
        - openConnection()
        - closeConnection()
    }


    AddUpdateJobOfferController --> FacadeJob
    JobOffersController --> FacadeJob
    SeeJobOfferController --> FacadeJob

    MySQLFactory -left-|> Factory
}

package DAO{

    abstract class JobDAO{
        + {static} getInstance() : JobDAO
        + addJobOffer(String jobTitle, String location, String roleType,
         Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + deleteJob(Job jobToDelete)
        + updateJob(Job jobToUpdateString, jobTitle, String location, String roleType,
          Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + validateJob(Job jobToValidate)
        + searchJob(String jobTitle) : Job
        + seeAllJobOffers() : Job[]
        + seeMyJobOffers() : Job[]
        + seePendingJobOffers() : job[]
    }

    class MySQLJobDAO{
        - DB : Connection
        + addJobOffer(String jobTitle, String location, String roleType,
         Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + deleteJob(Job jobToDelete)
        + updateJob(Job jobToUpdateString, jobTitle, String location, String roleType,
          Date dateStartJob, String lengthJob,String descriptionJob, String contactInfo)
        + validateJob(Job jobToValidate)
        + searchJob(String jobTitle) : Job
        + seeAllJobOffers() : Job[]
        + seeMyJobOffers() : Job[]
        + seePendingJobOffers() : job[]
    }

    MySQLJobDAO -up-|> JobDAO
    JobDAO <-right- FacadeJob
    JobDAO ..> Factory  : creates
    MySQLJobDAO <.right. MySQLFactory : creates
}

@enduml