@startuml
skinparam classAttributeIconSize 0

class Application

package launcher{

    class Main{
        start(Stage stage)
        {static} main(String[] args)
     }

    Application <|-- Main
}

interface Initializable

package GUI{

    abstract class AbstractRouter{
        + {static} LOGIN_FXML_PATH : String = "views/login.fxml"
        + {static} load(String pathFXML) : Parent
        + changeView(String pathFXML, ActionEvent event)
        + adminRestricted(String pathFXML, ActionEvent event)
        + studentRestricted(String pathFXML, ActionEvent event)
        + partnerRestricted(String pathFXML, ActionEvent event)
    }

    class LoginController{
            - emailTF : TextField
            - passwordTF : TextField
            - loginFailLabel : Label
            + login(ActionEvent event)
            + loadRegister(ActionEvent event)
            + exit(ActionEvent event)
            + initialize(URL location, RessourceBundle resources)
        }

    class UserRouter{
        + {static} REGISTER_FXML_PATH : String = "views/user/register.fxml"
        + {static} HOME_STUDENT_FXML_PATH : String = "views/user/homeStudent.fxml"
        + {static} HOME_ADMIN_FXML_PATH : String = "views/user/homeAdmin.fxml"
        + {static} HOME_PARTNER_FXML_PATH : String = "views/user/homePartner.fxml"
        + {static} getInstance() : UserRouter
        + login(ActionEvent event )
    }

    Initializable <|.down. LoginController : implements
    AbstractRouter <.. Main : creates
    LoginController <-- AbstractRouter
    AbstractRouter <.left. LoginController : creates
    AbstractRouter <|-- UserRouter
}

package BusinessLogic{
    class FacadeUser{
        + login(email,password)
        + {static} getInstance() : FacadeUser
    }

    class SessionUser{
        + {static} getInstance() : SessionUser
        + getCurrentUser() : User
        + setCurrentUser(User currentUser)
        + isStudent() : boolean
        + isAdmin() : boolean
        + isPartner() : boolean
    }

    interface SessionI{
        + isStudent(): boolean
        + isAdmin() : boolean
        + isPartner() : boolean
    }

    class User{
        - lastname : String
        - firstname : String
        - emailAdress : String
        - password : String
        + getLastname(): String
        + setLastname(String  lastname)
        + getFirstname(): String
        + setFirstname(String  firstname)
        + getEmailAdress(): String
        + setEmailAdress(String  emailAdress)
        + getPassword(): String
        + setPassword(String  password)
        + getRole(): Role
        + setRole(Role role)
    }

    abstract class Role

    class Admin

    class Student{
        - pseudo : String
        - points : int
        - services : Service[]
        - servicesBuy : CommandOfService[]
        + getPseudo() : String
        + setPseudo(String pseudo)
        + getPoints() : int
        + setPoints(int points)
        + getServices() : Service[]
        + setServices(Service[] services)
        + getServicesBuy() : CommandOfService[]
        + setServicesBuy(CommandOfService[] servicesBuy)
    }

    class Partner{
        - company : String
        - jobs : Job[]
        - coupons : Coupon[]
        + getCompany() : String
        + setCompany(String company)
        + getJobs() : Job[]
        + setJobs(Job[] jobs)
        + getCoupons() : Coupon[]
        + setCoupons(Coupon[] coupons)
    }

    abstract class Factory{
        + CreateUserDAO() : UserDAO
    }

    class MySQLFactory{
        - db : Connection
        + {static} getInstance() : MySQLFactory
        + CreateUserDAO() : UserDAO
        - openConnection()
        - closeConnection()
    }

    Role <|-left Student
    Role <|-right Admin
    Role <|--up Partner
    Role <-- User
    User <-- SessionUser
    SessionI <|.. SessionUser : implements
    SessionI <-- AbstractRouter
    SessionUser <.. FacadeUser : creates
    Factory <.. FacadeUser : creates
    Factory <|-- MySQLFactory
    FacadeUser <-up- LoginController
}

package DAO{
    abstract class UserDAO{
        + searchUser(String email) : User
    }

    class MySQLUserDAO{
        - DB : Connection
        + searchUser(String email) : User
        + {static} getInstance() : MySQLUserDAO
    }

    class MySQLConnectionUtil{
        - db : Connection
        + getDb() : Connection
        + {static} getInstance() : MySQLConnectionUtil
    }

    UserDAO <|-up MySQLUserDAO
    UserDAO <-up- FacadeUser

    MySQLUserDAO <.up. MySQLFactory : creates
    MySQLConnectionUtil <.up. MySQLFactory : creates
}

@enduml